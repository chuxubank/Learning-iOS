(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{271:function(e,t,n){"use strict";n.r(t);var a=n(38),o=Object(a.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"drawing-in-ios"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#drawing-in-ios","aria-hidden":"true"}},[e._v("#")]),e._v(" Drawing in iOS")]),e._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#drawing"}},[e._v("Drawing")]),n("ul",[n("li",[n("a",{attrs:{href:"#✅-watch-the-fifth-video"}},[e._v("✅ Watch the fifth video.")])]),n("li",[n("a",{attrs:{href:"#✅-review-lecture-5-slides-and-download-demo-code"}},[e._v("✅ Review Lecture 5 Slides and download demo code.")]),n("ul",[n("li",[n("a",{attrs:{href:"#error-handling"}},[e._v("Error Handling")])]),n("li",[n("a",{attrs:{href:"#any"}},[e._v("Any")])]),n("li",[n("a",{attrs:{href:"#other-interesting-classes"}},[e._v("Other Interesting Classes")])]),n("li",[n("a",{attrs:{href:"#custom-drawing"}},[e._v("Custom Drawing")])])])]),n("li",[n("a",{attrs:{href:"#✅-complete-the-third-reading-assignment"}},[e._v("✅ Complete the third reading assignment.")])])])])])]),n("p"),e._v(" "),n("h2",{attrs:{id:"drawing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#drawing","aria-hidden":"true"}},[e._v("#")]),e._v(" Drawing")]),e._v(" "),n("p",[e._v("Paul Hegarty covers error handling, special types any and anyobject, and casting. He then introduces views.")]),e._v(" "),n("p",[n("em",[e._v("Note: A link to the demo code from this lecture can be found on the last page of the slide deck.")])]),e._v(" "),n("p",[e._v("Topics Include: Error Handling, throws, Any, AnyObject, casting, NSObject, NSNumber, Date, Data, UIView, CGFloat, CGPoint, CGSize, CGRect, frame, center, Identity Inspector, Path, UIBezierPath, Drawing, UIColor, Layers, View Transparency, UILabel, Fonts, UIFont, UIImageView, UIImage")]),e._v(" "),n("h3",{attrs:{id:"✅-watch-the-fifth-video"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#✅-watch-the-fifth-video","aria-hidden":"true"}},[e._v("#")]),e._v(" ✅ Watch the fifth video.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://youtu.be/h2hm2AtanRU?list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lecture 5: Drawing"),n("OutboundLink")],1)]),e._v(" "),n("video",{attrs:{width:"100%",controls:"",preload:""}},[n("source",{attrs:{src:"https://applehosted.podcasts.apple.com/stanford/media/5_Drawing_317-8878116075149346380-05_10_09_17_prores_CS193p_1080p_3mb_cc.m4v"}})]),e._v(" "),n("h3",{attrs:{id:"✅-review-lecture-5-slides-and-download-demo-code"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#✅-review-lecture-5-slides-and-download-demo-code","aria-hidden":"true"}},[e._v("#")]),e._v(" ✅ Review Lecture 5 Slides and download demo code.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/chuxubank/Learning-iOS/blob/master/Developing-iOS-11-Apps-with-Swift/L4-Drawing-in-iOS/Lecture-5-Slides.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Lecture 5 Slides"),n("OutboundLink")],1)]),e._v(" "),n("h4",{attrs:{id:"error-handling"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#error-handling","aria-hidden":"true"}},[e._v("#")]),e._v(" Error Handling")]),e._v(" "),n("p",[n("strong",[e._v("In Swift, methods can throw errors")])]),e._v(" "),n("p",[e._v("You will always know that can throw because they’ll have the keyword throws on the end.")]),e._v(" "),n("p",[n("code",[e._v("func save() throws")])]),e._v(" "),n("p",[e._v("You must put calls to functions like this in a "),n("code",[e._v("do { }")]),e._v(" block and use the word try to call them.")]),e._v(" "),n("div",{staticClass:"language-swift extra-class"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("do")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),e._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("save")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("catch")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" error "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// error will be something that implements the Error protocol, e.g., NSError")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// usually these are enums that have associated values to get error details")]),e._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("throw")]),e._v(" error "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// this would re-throw the error (only ok if the method we are in throws) ")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If you are certain a call will not throw, you can force try with try! ... (rarely)")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(" context"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("save")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// will crash your program if save() actually throws an error")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// Or you can conditionally try, turning the return into an Optional (which will be nil if fail) ... ")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("try")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("?")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("errorProneFunctionThatReturnsAnInt")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// x will be Int?")]),e._v("\n")])])]),n("h4",{attrs:{id:"any"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#any","aria-hidden":"true"}},[e._v("#")]),e._v(" Any")]),e._v(" "),n("p",[n("strong",[n("code",[e._v("Any")]),e._v(" & "),n("code",[e._v("AnyObject")]),e._v(" are special types")])]),e._v(" "),n("p",[e._v("These types used to be commonly used for compatibility with old Objective-C APIs")]),e._v(" "),n("p",[e._v("But not so much anymore in iOS 11 since those old Objective-C APIs have been updated (though we did see it with NSAttributedString)")]),e._v(" "),n("p",[e._v("Variables of type Any can hold something of any type (AnyObject holds classes only).")]),e._v(" "),n("p",[e._v("Swift is a strongly typed language, though, so you can’t invoke a method on an Any.")]),e._v(" "),n("p",[e._v("You have to convert it into a concrete type first.")]),e._v(" "),n("p",[e._v("One of the beauties of Swift is its strong typing, so generally you want to avoid Any.")]),e._v(" "),n("p",[n("strong",[e._v("Where will you see it in iOS?")])]),e._v(" "),n("p",[e._v("We already saw it in NSAttributedString.")]),e._v(" "),n("p",[n("code",[e._v("let attributes: [NSAttributedStringKey:Any] = ...")])]),e._v(" "),n("p",[e._v("The attributes of an NSAttributedString can be different things (UIColor, UIFont, etc.).")]),e._v(" "),n("p",[e._v("So the type "),n("code",[e._v("Any")]),e._v(" was used as the type of the values in the attributes Dictionary.")]),e._v(" "),n("p",[e._v("Sometimes (rarely) Any will be the type of a function’s argument.")]),e._v(" "),n("p",[e._v("Here’s a UIViewController method that includes a sender (which can be of any type).")]),e._v(" "),n("p",[n("code",[e._v("func prepare(for segue: UIStoryboardSegue, sender: Any?)")])]),e._v(" "),n("p",[e._v("The sender is the thing that caused this “segue” (i.e., a move to another MVC) to occur.")]),e._v(" "),n("p",[e._v("The sender might be a UIButton or a UITableViewCell or some custom thing in your code.")]),e._v(" "),n("p",[e._v("It’s an Optional because it’s okay for a segue to happen without a sender being specified.")]),e._v(" "),n("p",[e._v("These are old Objective-C API.")]),e._v(" "),n("p",[e._v("In Swift we would probably would have used an enum with associated data or a protocol.")]),e._v(" "),n("p",[n("strong",[e._v("Don’t use Any in this course")])]),e._v(" "),n("p",[e._v("You can, of course, call iOS API that uses it.")]),e._v(" "),n("p",[e._v("But don’t use it for any of your own internal data structure work.")]),e._v(" "),n("p",[n("strong",[e._v("How do we use a variable of type Any?")])]),e._v(" "),n("p",[e._v("We can’t use it directly (since we don’t know what type it really is). Instead, we must convert it to another, known type.\nConversion is done with the as? keyword in Swift.\nThis conversion might not be possible, so the conversion generates an Optional.\nYou can also check to see if something can be converted with the is keyword (true/false).\nWe almost always use as? it with if let ...\nlet unknown: Any = ... // we can’t send unknown a message because it’s “typeless” if let foo = unknown as? MyType {\n// foo is of type MyType in here\n// so we can invoke MyType methods or access MyType vars in foo // if unknown was not of type MyType, then we’ll never get here\n}")]),e._v(" "),n("p",[n("strong",[e._v("By the way, casting with as? is not just for Any & AnyObject")])]),e._v(" "),n("p",[e._v("You can cast any type with as? into any other type that makes sense.\nMostly this would be casting an object from one of its superclasses down to a subclass. But it could also be used to cast any type to a protocol it implements (more on this later).\nExample of “downcasting” from a superclass down to a subclass ...\nlet vc: UIViewController = ConcentrationViewController()\nThe type of vc is UIViewController (because we explicitly typed it to be).\nAnd the assignment is legal because a ConcentrationViewController is a UIViewController. But we can’t say, for example, vc.flipCard(...), since vc is typed as a UIViewController.\nHowever, if we cast vc to be a ConcentrationViewController, then we can use it ... if let cvc = vc as? ConcentrationViewController {\ncvc.flipCard(...) // this is okay }")]),e._v(" "),n("h4",{attrs:{id:"other-interesting-classes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#other-interesting-classes","aria-hidden":"true"}},[e._v("#")]),e._v(" Other Interesting Classes")]),e._v(" "),n("p",[e._v("NSObject\nBase class for all Objective-C classes\nSome advanced features will require you to subclass from NSObject (and it can’t hurt to do so)\nNSNumber\nGeneric number-holding class (i.e., reference type)\nlet n = NSNumber(35.5) or let n: NSNumber = 35.5\nlet intified: Int = n.intValue // also doubleValue, boolValue, etc.\nDate\nValue type used to find out the date and time right now or to store past or future dates\nSee also Calendar, DateFormatter, DateComponents\nIf you are displaying a date in your UI, there are localization ramifications, so check these out!\nData\nA value type “bag o’ bits”. Used to save/restore/transmit raw data throughout the iOS SDK.")]),e._v(" "),n("h4",{attrs:{id:"custom-drawing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#custom-drawing","aria-hidden":"true"}},[e._v("#")]),e._v(" Custom Drawing")]),e._v(" "),n("p",[n("strong",[e._v("Views")])]),e._v(" "),n("p",[e._v("A view (i.e. UIView subclass) represents a rectangular area\nDefines a coordinate space For drawing\nAnd for handling touch events\nHierarchical\nA view has only one superview ... var superview: UIView?\nBut it can have many (or zero) subviews ... var subviews: [UIView]\nThe order in the subviews array matters: those later in the array are on top of those earlier A view can clip its subviews to its own bounds or not (the default is not to)\nUIWindow\nThe UIView at the very, very top of the view hierarchy (even includes status bar)\nUsually only one UIWindow in an entire iOS application ... it’s all about views, not windows")]),e._v(" "),n("p",[e._v("The hierarchy is most often constructed in Xcode graphically Even custom views are usually added to the view hierarchy using Xcode\nBut it can be done in code as well\nfunc addSubview(_ view: UIView)// sent to view’s (soon to be) superview\nfunc removeFromSuperview() // sent to the view you want to remove (not its superview) Where does the view hierarchy start?\nThe top of the (useable) view hierarchy is the Controller’s var view: UIView.\nThis simple property is a very important thing to understand!\nThis view is the one whose bounds will change on rotation, for example.\nThis view is likely the one you will programmatically add subviews to (if you ever do that). All of your MVC’s View’s UIViews will have this view as an ancestor.\nIt’s automatically hooked up for you when you create an MVC in Xcode.")]),e._v(" "),n("p",[n("strong",[e._v("Initializing a UIView")])]),e._v(" "),n("p",[e._v("As always, try to avoid an initializer if possible\nBut having one in UIView is slightly more common than having a UIViewController initializer A UIView’s initializer is different if it comes out of a storyboard\ninit(frame: CGRect) // initializer if the UIView is created in code init(coder: NSCoder) // initializer if the UIView comes out of a storyboard\nIf you need an initializer, implement them both ...\nfunc setup() { ... }\noverride init(frame: CGRect) { // a designated initializer super.init(frame: frame)\nsetup() // might have to be before super.init }\nrequiredinit?(coderaDecoder:NSCoder){ //arequired,failableinitializer\nsuper.init(coder: aDecoder)\nsetup()\n}")]),e._v(" "),n("p",[e._v("Another alternative to initializers in UIView ...\nawakeFromNib() // this is only called if the UIView came out of a storyboard\nThis is not an initializer (it’s called immediately after initialization is complete)\nAll objects that inherit from NSObject in a storyboard are sent this\nOrder is not guaranteed, so you cannot message any other objects in the storyboard here")]),e._v(" "),n("p",[n("strong",[e._v("Coordinate System Data Structures")])]),e._v(" "),n("p",[e._v("CGFloat\nAlways use this instead of Double or Float for anything to do with a UIView’s coordinate system You can convert to/from a Double or Float using initializers, e.g., let cgf = CGFloat(aDouble)\nCGPoint\nSimply a struct with two CGFloats in it: x and y. var point = CGPoint(x: 37.0, y: 55.2)\npoint.y -= 30\npoint.x += 20.0\nCGSize\nAlso a struct with two CGFloats in it: width and height. var size = CGSize(width: 100.0, height: 50.0) size.width += 42.5\nsize.height += 75")]),e._v(" "),n("p",[e._v("CGRect\nA struct with a CGPoint and a CGSize in it ... struct CGRect {\nvar origin: CGPoint\nvar size: CGSize\n}\nlet rect = CGRect(origin: aCGPoint, size: aCGSize) // there are other inits as well Lots of convenient properties and functions on CGRect like ...\n// left edge\n// midpoint vertically\n// does this CGRect intersect this other one?\n// clip the CGRect to the intersection with the other one //doestheCGRectcontainthegivenCGPoint?\nvar minX: CGFloat\nvar midY: CGFloat\nintersects(CGRect) -> Bool\nintersect(CGRect)\ncontains(CGPoint)->Bool\n... and many more (make yourself a CGRect and type . after it to see more)")]),e._v(" "),n("p",[n("strong",[e._v("View Coordinate System")])]),e._v(" "),n("p",[e._v("Origin is upper left\nUnits are points, not pixels\nincreasing x (500, 35)\nPixels are the minimum-sized unit of drawing your device is capable of\nPoints are the units in the coordinate system\nMost of the time there are 2 pixels per point, but it could be only 1 or even 3\nHow many pixels per point are there? UIView’s var contentScaleFactor: CGFloat\nThe boundaries of where drawing happens\nvar bounds: CGRect // a view’s internal drawing space’s origin and size\nThis is the rectangle containing the drawing space in its own coordinate system\nIt is up to your view’s implementation to interpret what bounds.origin means (often nothing)\nWhere is the UIView?\nvar center: CGPoint // the center of a UIView in its superview’s coordinate system\nvar frame: CGRect // the rect containing a UIView in its superview’s coordinate system")]),e._v(" "),n("p",[n("strong",[e._v("bounds vs frame")])]),e._v(" "),n("p",[e._v("Use frame and/or center to position a UIView")]),e._v(" "),n("p",[e._v("These are never used to draw inside a view’s coordinate system\nYou might think frame.size is always equal to bounds.size, but you’d be wrong ...")]),e._v(" "),n("p",[e._v("Views can be rotated (and scaled and translated)")]),e._v(" "),n("p",[e._v("View B’s bounds = ((0,0),(200,250)) View B’s frame = ((140,65),(320,320)) View B’s center = (300,225)")]),e._v(" "),n("p",[e._v("View B’s middle in its own coordinates is ...\n(bounds.midX, bounds.midY) = (100, 125)")]),e._v(" "),n("p",[e._v("Views are rarely rotated, but don’t misuse frame or center anyway by assuming that.")]),e._v(" "),n("p",[n("strong",[e._v("Creating Views")]),e._v("\nMost often your views are created via your storyboard\nXcode’s Object Palette has a generic UIView you can drag out\nAfter you do that, you must use the Identity Inspector to changes its class to your subclass\nOn rare occasion, you will create a UIView via code\nYou can use the frame initializer ... let newView = UIView(frame: myViewFrame)\nOr you can just use let newView = UIView() (frame will be CGRect.zero) Example\nlet labelRect = CGRect(x: 20, y: 20, width: 100, height: 50)\nlet label = UILabel(frame: labelRect) // UILabel is a subclass of UIView label.text = “Hello”")]),e._v(" "),n("p",[e._v("view.addSubview(label)")]),e._v(" "),n("p",[n("strong",[e._v("Custom Views")])]),e._v(" "),n("p",[e._v("When would I create my own UIView subclass?\nI want to do some custom drawing on screen\nI need to handle touch events in a special way (i.e. different than a button or slider does) We’ll talk about handling touch events in a bit. First we’ll focus on drawing.\nTo draw, just create a UIView subclass and override draw(CGRect)\noverride func draw(_ rect: CGRect)\nYou can draw outside the rect, but it’s never required to do so.\nThe rect is purely an optimization.\nIt is our UIView’s bounds that describe the entire drawing area (the rect is a subarea).\nNEVER call draw(CGRect)!! EVER! Or else!\nInstead, if you view needs to be redrawn, let the system know that by calling ...\nsetNeedsDisplay()\nsetNeedsDisplay(_ rect: CGRect) // rect is the area that needs to be redrawn iOS will then call your draw(CGRect) at an appropriate time")]),e._v(" "),n("p",[n("strong",[e._v("Defining a Path")])]),e._v(" "),n("p",[e._v("Create a UIBezierPath\nlet path = UIBezierPath()\nMove around, add lines or arcs to the path\npath.move(to: CGPoint(80, 50))\npath.addLine(to: CGPoint(140, 150))\npath.addLine(to: CGPoint(10, 150))\nClose the path (if you want)\npath.close()\nNow that you have a path, set attributes and stroke/fill\nUIColor.green.setFill()\nUIColor.red.setStroke()\npath.linewidth = 3.0\npath.fill()\npath.stroke()\n// note setFill is a method in UIColor, not UIBezierPath // note setStroke is a method in UIColor, not UIBezierPath // linewidth is a property in UIBezierPath, not UIColor\n// fill is a method in UIBezierPath // stroke method in UIBezierPath")]),e._v(" "),n("p",[n("strong",[e._v("Drawing")])]),e._v(" "),n("p",[e._v("You can also draw common shapes with UIBezierPath\nlet roundedRect = UIBezierPath(roundedRect: CGRect, cornerRadius: CGFloat) let oval = UIBezierPath(ovalIn: CGRect)\n... and others\nClipping your drawing to a UIBezierPath’s path addClip()\nFor example, you could clip to a rounded rect to enforce the edges of a playing card Hit detection\nfunc contains(_ point: CGPoint) -> Bool // returns whether the point is inside the path The path must be closed. The winding rule can be set with usesEvenOddFillRule property.\nEtc.\nLots of other stuff. Check out the documentation.")]),e._v(" "),n("p",[n("strong",[e._v("UIColor")])]),e._v(" "),n("p",[e._v("Colors are set using UIColor\nThere are type (aka static) vars for standard colors, e.g. let green = UIColor.green You can also create them from RGB, HSB or even a pattern (using UIImage)\nBackground color of a UIView\nvar backgroundColor: UIColor // we used this for our Concentration buttons\nColors can have alpha (transparency)\nlet semitransparentYellow = UIColor.yellow.withAlphaComponent(0.5) Alpha is between 0.0 (fully transparent) and 1.0 (fully opaque)\nIf you want to draw in your view with transparency ... You must let the system know by setting the UIView var opaque = false\nYou can make your entire UIView transparent ... var alpha: CGFloat")]),e._v(" "),n("p",[n("strong",[e._v("Layers")])]),e._v(" "),n("p",[e._v("Underneath UIView is a drawing mechanism called CALayer\nYou usually do not care about this.\nBut there is some useful API there.\nYou access a UIView’s “layer” using this var ...\nvar layer: CALayer\nThe CA in CALayer stands for “Core Animation”.\nMostly we can do animation in a UIView without accessing this layer directly. But it is where the actual animation functionality of UIView is coming from. We’ll talk about animation next week.\nBut CALayer can do some cool non-animation oriented things as well, for example ...\n// make the background a rounded rect // draw a border around the view\n// the color of the border (if any)\nvar cornerRadius: CGFloat\nvar borderWidth: CGFloat\nvar borderColor: CGColor?\nYou can get a CGColor from a UIColor using UIColor’s cgColor var.")]),e._v(" "),n("p",[n("strong",[e._v("View Transparency")])]),e._v(" "),n("p",[e._v("What happens when views overlap and have transparency?\nAs mentioned before, subviews list order determines who is in front\nLower ones (earlier in the array) can “show through” transparent views on top of them Transparency is not cheap, by the way, so use it wisely\nCompletely hiding a view without removing it from hierarchy\nvar isHidden: Bool\nAn isHidden view will draw nothing on screen and get no events either Not as uncommon as you might think to temporarily hide a view")]),e._v(" "),n("p",[n("strong",[e._v("Drawing Text")])]),e._v(" "),n("p",[e._v("Usually we use a UILabel to put text on screen\nBut there are certainly occasions where we want to draw text in our draw(CGRect) To draw in draw(CGRect), use NSAttributedString\nlet text = NSAttributedString(string: “hello”) // probably would set some attributes too text.draw(at: aCGPoint) // or draw(in: CGRect)\nlet textSize: CGSize = text.size // how much space the string will take up\nAccessing a range of characters in an NSAttributedString\nNSRange has an init which can handle the String vs. NSString weirdness ...\nlet pizzaJoint = “café pesto”\nvar attrString = NSMutableAttributedString(string: pizzaJoint)\nlet firstWordRange = pizzaJoint.startIndex..<pizzaJoint.indexOf(“ “)!\nlet nsrange = NSRange(firstWordRange, in: pizzaJoint) // convert Range<String.Index> attrString.addAttribute(.strokeColor, value: UIColor.orange, range: nsrange)")]),e._v(" "),n("p",[n("strong",[e._v("Fonts")])]),e._v(" "),n("p",[e._v("Fonts in iOS are very important to get right\nThey are fundamental to the look and feel of the UI")]),e._v(" "),n("p",[e._v("Usually you set fonts in UI elements like UIButton, UILabel, etc.\nBe sure to choose a “preferred font” for user content in the Inspector in InterfaceBuilder. User content is information generated by or requested by the user (not button titles, etc.). But you might want to set a font in an NSAttributedString too ...\nSimple way to get a font in code\nGet preferred font for a given text style (e.g. body, etc.) using this UIFont type method ... static func preferredFont(forTextStyle: UIFontTextStyle) -> UIFont\nSome of the styles (see UIFontDescriptor documentation for more) ... UIFontTextStyle.headline\n.body\n.footnote\nImportantly, the size of the font you get is determined by user settings (esp. for Accessibility). You’ll want to make sure your UI looks good with all size fonts!\nMore advanced way ...\nChoose a specific font by name ...\nlet font = UIFont(name: “Helvetica”, size: 36.0)\nYou can also use the UIFontDescriptor class to get the font you want.\nNow get metrics for the text style you want and scale font to the user’s desired size ... let metrics = UIFontMetrics(forTextStyle: .body) // or UIFontMetrics.default let fontToUse = metrics.scaledFont(for: font)")]),e._v(" "),n("p",[e._v("There are also “system fonts”\nThese appear usually on things like buttons.\nstatic func systemFont(ofSize: CGFloat) -> UIFont\nstatic func boldSystemFont(ofSize: CGFloat) -> UIFont\nBut again, don’t use these for your user’s content. Use preferred fonts for that.")]),e._v(" "),n("p",[n("strong",[e._v("Drawing Images")])]),e._v(" "),n("p",[e._v("There is a UILabel-equivalent for images\nUIImageView\nBut, again, you might want to draw the image inside your draw(CGRect) ... Creating a UIImage object\nlet image: UIImage? = UIImage(named: “foo”) // note that its an Optional\nYou add foo.jpg to your project in the Assets.xcassets file (we’ve ignored this so far) Images will have different resolutions for different devices (all managed in Assets.xcassets)\nYou can also create one from files in the file system\n(But we haven’t talked about getting at files in the file system ... anyway ...)\nlet image: UIImage? = UIImage(contentsOfFile: pathString)\nlet image: UIImage? = UIImage(data: aData) // raw jpg, png, tiff, etc. image data\nYou can even create one by drawing with Core Graphics See documentation for UIGraphicsBeginImageContext(CGSize)")]),e._v(" "),n("p",[e._v("Once you have a UIImage, you can blast its bits on screen\nlet image: UIImage = ...\nimage.draw(at point: aCGPoint) // the upper left corner put at aCGPoint image.draw(in rect: aCGRect) // scales the image to fit aCGRect image.drawAsPattern(in rect: aCGRect) // tiles the image into aCGRect")]),e._v(" "),n("p",[n("strong",[e._v("Redraw on bounds change?")])]),e._v(" "),n("p",[e._v("By default, when a UIView’s bounds changes, there is no redraw\nInstead, the “bits” of the existing image are scaled to the new bounds size This is often not what you want ...\nLuckily, there is a UIView property to control this! It can be set in Xcode too. var contentMode: UIViewContentMode\nUIViewContentMode\nDon’t scale the view, just place the bits (intact) somewhere ... .left/.right/.top/.bottom/.topRight/.topLeft/.bottomRight/.bottomLeft/.center Scale the “bits” of the view ...\n.scaleToFill/.scaleAspectFill/.scaleAspectFit // .scaleToFill is the default Redraw by calling draw(CGRect) again (costly, but for certain content, better results) ... .redraw")]),e._v(" "),n("p",[n("strong",[e._v("Layout on bounds change?")])]),e._v(" "),n("p",[e._v("What about your subviews on a bounds change?\nIf your bounds change, you may want to reposition some of your subviews\nUsually you would set this up using Autolayout constraints\nOr you can manually reposition your views when your bounds change by overriding ... override func layoutSubviews() {\nsuper.layoutSubviews()\n// reposition my subviews’s frames based on my new bounds }")]),e._v(" "),n("p",[n("strong",[e._v("Demo Code")])]),e._v(" "),n("p",[e._v("Download the demo code from today’s lecture.")]),e._v(" "),n("h3",{attrs:{id:"✅-complete-the-third-reading-assignment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#✅-complete-the-third-reading-assignment","aria-hidden":"true"}},[e._v("#")]),e._v(" ✅ Complete the third reading assignment.")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/chuxubank/Learning-iOS/blob/master/Developing-iOS-11-Apps-with-Swift/L4-Drawing-in-iOS/Reading-3-Finishing-Off-Swift.pdf",target:"_blank",rel:"noopener noreferrer"}},[e._v("Reading 3: Finishing off Swift"),n("OutboundLink")],1)])])},[],!1,null,null,null);t.default=o.exports}}]);